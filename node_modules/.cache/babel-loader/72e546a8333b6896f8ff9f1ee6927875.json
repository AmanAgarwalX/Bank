{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/aman/work/tcs/bank/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Grid, TextField, FormControl, InputLabel, Select, MenuItem, Stepper, Step, StepLabel, Button } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    height: 15,\n    width: 15\n  },\n  mainHeading: {\n    font: \"normal normal 500 25px/30px Poppins\",\n    letterSpacing: \"0.9px\",\n    color: \"#62657B\"\n  },\n  subHeading: {\n    font: \"normal normal 500 22px/25px Poppins\",\n    letterSpacing: \"0.72px\",\n    color: \"#707070\"\n  },\n  answer: {\n    font: \"normal normal normal 17px/22px Poppins\",\n    letterSpacing: \"0.66px\",\n    color: \"#707070\"\n  },\n  grid: {\n    borderBottom: \"1px solid rgb(0,0,0,.12)\",\n    paddingBottom: 20\n  }\n}));\nconst form = [{\n  first_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"First name\",\n    max_length: 30\n  },\n  last_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Last name\",\n    max_length: 150\n  },\n  email: {\n    type: \"email\",\n    required: true,\n    read_only: false,\n    label: \"Email\"\n  },\n  address: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Address\"\n  },\n  city: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"City\"\n  },\n  state: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"State\"\n  },\n  zip_code: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Zip code\"\n  },\n  country: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Country\"\n  }\n}, {\n  phone_number: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Phone number\",\n    max_length: 128\n  },\n  type: {\n    type: \"choice\",\n    required: true,\n    read_only: false,\n    label: \"Account Type\",\n    choices: [{\n      value: \"Current\",\n      display_name: \"Current\"\n    }, {\n      value: \"Savings\",\n      display_name: \"Savings\"\n    }]\n  },\n  pan: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Pan number\"\n  },\n  aadhar: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Aadhar number\"\n  },\n  company: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Current Company\"\n  },\n  dob: {\n    type: \"date\",\n    required: true,\n    read_only: false,\n    label: \"Date of Birth\"\n  }\n}];\nconst isMultiline = new Set([\"address\"]);\n\nconst QuestionAnswer = ({\n  question,\n  answer\n}) => {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.subHeading,\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.answer,\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionAnswer, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = QuestionAnswer;\nconst steps = [\"Personal Details\", \"Account Details\"];\nexport default _s2(props => {\n  _s2();\n\n  const classes = useStyles();\n  const [data, setData] = useState({});\n  const [step, setStep] = useState(0);\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            type: field.type,\n            value: data[key] || \"\",\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            label: _.startCase(field.label || key),\n            variant: \"outlined\",\n            required: field.required,\n            fullWidth: true,\n            multiline: isMultiline.has(key) || false,\n            rows: isMultiline.has(key) ? 2 : 1,\n            id: key,\n            name: key,\n            autoComplete: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this);\n\n      case \"date\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n            disableToolbar: true,\n            fullWidth: true,\n            value: data[key] || null,\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            label: _.startCase(field.label || key),\n            inputVariant: \"outlined\",\n            format: \"yyyy-MM-dd\",\n            margin: \"normal\",\n            id: key,\n            KeyboardButtonProps: {\n              \"aria-label\": \"change date\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this);\n\n      case \"choice\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            variant: \"outlined\",\n            required: field.required,\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: _.startCase(field.label || key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              label: _.startCase(field.label || key),\n              value: data[key] || \"\",\n              onChange: e => setData({ ...data,\n                [key]: e.target.value\n              }),\n              children: field.choices.map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: c.value,\n                children: c.display_name\n              }, c.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: step,\n      children: [steps.map(s => /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: s\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)\n      }, s, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [step < 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          spacing: 2,\n          children: Object.keys(form[step]).map(key => getFormComponent(key, form[step][key]))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => setStep(step + 1),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), step === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          spacing: 2,\n          children: [0, 1].map(s => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  float: \"left\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: steps[s]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  float: \"right\"\n                },\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: () => setStep(s),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justify: \"space-evenly\",\n              children: Object.keys(form[s]).map(key => /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 5,\n                className: classes.grid,\n                children: /*#__PURE__*/_jsxDEV(QuestionAnswer, {\n                  question: form[s][key].label,\n                  answer: data[key]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 25\n                }, this)\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this)]\n          }, s, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => props.enqueueSnackbar(\"Form Submitted Successfully\"),\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true)]\n  }, void 0, true);\n}, \"4iXoyuOH2ny5vMCnOP9kI+17U8Q=\", false, function () {\n  return [useStyles];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionAnswer\");","map":{"version":3,"sources":["/home/aman/work/tcs/bank/src/App.js"],"names":["makeStyles","React","useState","Grid","TextField","FormControl","InputLabel","Select","MenuItem","Stepper","Step","StepLabel","Button","_","KeyboardDatePicker","useStyles","theme","icon","height","width","mainHeading","font","letterSpacing","color","subHeading","answer","grid","borderBottom","paddingBottom","form","first_name","type","required","read_only","label","max_length","last_name","email","address","city","state","zip_code","country","phone_number","choices","value","display_name","pan","aadhar","company","dob","isMultiline","Set","QuestionAnswer","question","classes","steps","props","data","setData","step","setStep","getFormComponent","key","field","e","target","startCase","has","map","c","s","padding","Object","keys","textAlign","float","enqueueSnackbar"],"mappings":"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","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport {\n  Grid,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    height: 15,\n    width: 15,\n  },\n  mainHeading: {\n    font: \"normal normal 500 25px/30px Poppins\",\n    letterSpacing: \"0.9px\",\n    color: \"#62657B\",\n  },\n  subHeading: {\n    font: \"normal normal 500 22px/25px Poppins\",\n    letterSpacing: \"0.72px\",\n    color: \"#707070\",\n  },\n  answer: {\n    font: \"normal normal normal 17px/22px Poppins\",\n    letterSpacing: \"0.66px\",\n    color: \"#707070\",\n  },\n  grid: {\n    borderBottom: \"1px solid rgb(0,0,0,.12)\",\n    paddingBottom: 20,\n  },\n}));\n\nconst form = [\n  {\n    first_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"First name\",\n      max_length: 30,\n    },\n    last_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Last name\",\n      max_length: 150,\n    },\n    email: {\n      type: \"email\",\n      required: true,\n      read_only: false,\n      label: \"Email\",\n    },\n    address: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Address\",\n    },\n    city: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"City\",\n    },\n    state: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"State\",\n    },\n    zip_code: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Zip code\",\n    },\n    country: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Country\",\n    },\n  },\n  {\n    phone_number: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Phone number\",\n      max_length: 128,\n    },\n    type: {\n      type: \"choice\",\n      required: true,\n      read_only: false,\n      label: \"Account Type\",\n      choices: [\n        {\n          value: \"Current\",\n          display_name: \"Current\",\n        },\n        {\n          value: \"Savings\",\n          display_name: \"Savings\",\n        },\n      ],\n    },\n    pan: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Pan number\",\n    },\n    aadhar: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Aadhar number\",\n    },\n    company: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Current Company\",\n    },\n    dob: {\n      type: \"date\",\n      required: true,\n      read_only: false,\n      label: \"Date of Birth\",\n    },\n  },\n];\nconst isMultiline = new Set([\"address\"]);\n\nconst QuestionAnswer = ({ question, answer }) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className={classes.subHeading}>{question}</div>\n      <br />\n      <div className={classes.answer}>{answer}</div>\n    </div>\n  );\n};\n\nconst steps = [\"Personal Details\", \"Account Details\"];\n\nexport default (props) => {\n  const classes = useStyles();\n  const [data, setData] = useState({});\n  const [step, setStep] = useState(0);\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return (\n          <Grid item xs={12} key={key}>\n            <TextField\n              type={field.type}\n              value={data[key] || \"\"}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              label={_.startCase(field.label || key)}\n              variant=\"outlined\"\n              required={field.required}\n              fullWidth\n              multiline={isMultiline.has(key) || false}\n              rows={isMultiline.has(key) ? 2 : 1}\n              id={key}\n              name={key}\n              autoComplete={key}\n            />\n          </Grid>\n        );\n      case \"date\":\n        return (\n          <Grid item xs={12} key={key}>\n            <KeyboardDatePicker\n              disableToolbar\n              fullWidth\n              value={data[key] || null}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              label={_.startCase(field.label || key)}\n              inputVariant=\"outlined\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              id={key}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </Grid>\n        );\n\n      case \"choice\":\n        return (\n          <Grid item xs={12} key={key}>\n            <FormControl variant=\"outlined\" required={field.required} fullWidth>\n              <InputLabel>{_.startCase(field.label || key)}</InputLabel>\n              <Select\n                label={_.startCase(field.label || key)}\n                value={data[key] || \"\"}\n                onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              >\n                {field.choices.map((c) => (\n                  <MenuItem value={c.value} key={c.value}>\n                    {c.display_name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Stepper activeStep={step}>\n        {steps.map((s) => (\n          <Step key={s}>\n            <StepLabel>{s}</StepLabel>\n          </Step>\n        ))}\n        <Step>\n          <StepLabel>Summary</StepLabel>\n        </Step>\n      </Stepper>\n      <>\n        {step < 2 && (\n          <div style={{ padding: 20 }}>\n            <Grid container direction=\"column\" spacing={2}>\n              {Object.keys(form[step]).map((key) =>\n                getFormComponent(key, form[step][key])\n              )}\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setStep(step + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        )}\n        {step === 2 && (\n          <>\n            <Grid container direction=\"column\" spacing={2}>\n              {[0, 1].map((s) => (\n                <Grid item key={s}>\n                  <div style={{ padding: 20 }}>\n                    <div style={{ float: \"left\" }}>\n                      <h3>{steps[s]}</h3>\n                    </div>\n                    <div style={{ float: \"right\" }}>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => setStep(s)}\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                  <br />\n                  <Grid container justify=\"space-evenly\">\n                    {Object.keys(form[s]).map((key) => (\n                      <Grid item xs={5} key={key} className={classes.grid}>\n                        <QuestionAnswer\n                          question={form[s][key].label}\n                          answer={data[key]}\n                        />\n                      </Grid>\n                    ))}\n                  </Grid>\n                </Grid>\n              ))}\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() =>\n                  props.enqueueSnackbar(\"Form Submitted Successfully\")\n                }\n              >\n                Submit\n              </Button>\n            </div>\n          </>\n        )}\n      </>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}