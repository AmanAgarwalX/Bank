{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/aman/work/tcs/bank/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Grid, TextField, FormControl, InputLabel, Select, MenuItem, Stepper, Step, StepLabel } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nconst useStyles = makeStyles(theme => {});\nconst form = [{\n  first_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"First name\",\n    max_length: 30\n  },\n  last_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Last name\",\n    max_length: 150\n  },\n  email: {\n    type: \"email\",\n    required: true,\n    read_only: false,\n    label: \"Email\"\n  },\n  password1: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Password1\"\n  },\n  password2: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Password2\"\n  },\n  address: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Address\"\n  },\n  city: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"City\"\n  },\n  state: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"State\"\n  },\n  zip_code: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Zip code\"\n  },\n  country: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Country\"\n  }\n}, {\n  phone_number: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Phone number\",\n    max_length: 128\n  },\n  type: {\n    type: \"choice\",\n    required: true,\n    read_only: false,\n    label: \"Account Type\",\n    choices: [{\n      value: \"Current\",\n      display_name: \"Current\"\n    }, {\n      value: \"Savings\",\n      display_name: \"Savings\"\n    }]\n  },\n  pan: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Pan number\"\n  },\n  aadhar: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Aadhar number\"\n  },\n  company: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Current Company\"\n  }\n}];\nconst isMultiline = new Set([\"address\"]);\nexport default _s(props => {\n  _s();\n\n  const classes = useStyles();\n  const [data, setData] = useState({});\n  const [step, setStep] = useState(0);\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            type: key.startsWith(\"password\") ? \"password\" : \"string\",\n            value: data[key],\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            helperText: field.label,\n            label: _.startCase(field.label || key),\n            variant: \"outlined\",\n            required: field.required,\n            fullWidth: true,\n            multiline: isMultiline.has(key) || false,\n            rows: isMultiline.has(key) ? 2 : 1,\n            id: key,\n            name: key,\n            autoComplete: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case \"date\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n            disableToolbar: true,\n            value: data[key],\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            helperText: field.label,\n            label: _.startCase(field.label || key),\n            variant: \"inline\",\n            format: \"yyyy-MM-dd\",\n            margin: \"normal\",\n            id: key,\n            KeyboardButtonProps: {\n              \"aria-label\": \"change date\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this);\n\n      case \"choice\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            required: field.required,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-simple-select-label\",\n              children: _.startCase(field.label || key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              disabled: this.props.disabledMap[key] || this.props.disabled,\n              error: this.state.errors[key] !== undefined,\n              required: field.required,\n              variant: \"outlined\",\n              value: this.state[key],\n              value: data[key],\n              onChange: e => setData({ ...data,\n                [key]: e.target.value\n              }),\n              onChange: e => this.setState({\n                [key]: e.target.value\n              }),\n              children: field.choices.map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: c.value,\n                children: c.display_name\n              }, c.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: step,\n      children: [/*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Personal details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Account details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: step < 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.keys(form[step]).map(key => getFormComponent(key, form[step][key]))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n}, \"4iXoyuOH2ny5vMCnOP9kI+17U8Q=\", false, function () {\n  return [useStyles];\n});","map":{"version":3,"sources":["/home/aman/work/tcs/bank/src/App.js"],"names":["makeStyles","React","useState","Grid","TextField","FormControl","InputLabel","Select","MenuItem","Stepper","Step","StepLabel","_","KeyboardDatePicker","useStyles","theme","form","first_name","type","required","read_only","label","max_length","last_name","email","password1","password2","address","city","state","zip_code","country","phone_number","choices","value","display_name","pan","aadhar","company","isMultiline","Set","props","classes","data","setData","step","setStep","getFormComponent","key","field","startsWith","e","target","startCase","has","disabledMap","disabled","errors","undefined","setState","map","c","Object","keys"],"mappings":"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","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport {\n  Grid,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Stepper,\n  Step,\n  StepLabel,\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst useStyles = makeStyles((theme) => {});\n\nconst form = [\n  {\n    first_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"First name\",\n      max_length: 30,\n    },\n    last_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Last name\",\n      max_length: 150,\n    },\n    email: {\n      type: \"email\",\n      required: true,\n      read_only: false,\n      label: \"Email\",\n    },\n    password1: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Password1\",\n    },\n    password2: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Password2\",\n    },\n    address: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Address\",\n    },\n    city: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"City\",\n    },\n    state: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"State\",\n    },\n    zip_code: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Zip code\",\n    },\n    country: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Country\",\n    },\n  },\n  {\n    phone_number: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Phone number\",\n      max_length: 128,\n    },\n    type: {\n      type: \"choice\",\n      required: true,\n      read_only: false,\n      label: \"Account Type\",\n      choices: [\n        {\n          value: \"Current\",\n          display_name: \"Current\",\n        },\n        {\n          value: \"Savings\",\n          display_name: \"Savings\",\n        },\n      ],\n    },\n    pan: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Pan number\",\n    },\n    aadhar: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Aadhar number\",\n    },\n    company: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Current Company\",\n    },\n  },\n];\nconst isMultiline = new Set([\"address\"]);\n\nexport default (props) => {\n  const classes = useStyles();\n  const [data, setData] = useState({});\n  const [step, setStep] = useState(0);\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return (\n          <Grid item xs={12} key={key}>\n            <TextField\n              type={key.startsWith(\"password\") ? \"password\" : \"string\"}\n              value={data[key]}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              helperText={field.label}\n              label={_.startCase(field.label || key)}\n              variant=\"outlined\"\n              required={field.required}\n              fullWidth\n              multiline={isMultiline.has(key) || false}\n              rows={isMultiline.has(key) ? 2 : 1}\n              id={key}\n              name={key}\n              autoComplete={key}\n            />\n          </Grid>\n        );\n        break;\n      case \"date\":\n        return (\n          <Grid item xs={12} key={key}>\n            <KeyboardDatePicker\n              disableToolbar\n              value={data[key]}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              helperText={field.label}\n              label={_.startCase(field.label || key)}\n              variant=\"inline\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              id={key}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </Grid>\n        );\n\n      case \"choice\":\n        return (\n          <Grid item xs={12} key={key}>\n            <FormControl key={key} required={field.required}>\n              <InputLabel id=\"demo-simple-select-label\">\n                {_.startCase(field.label || key)}\n              </InputLabel>\n              <Select\n                fullWidth\n                disabled={this.props.disabledMap[key] || this.props.disabled}\n                error={this.state.errors[key] !== undefined}\n                required={field.required}\n                variant=\"outlined\"\n                value={this.state[key]}\n                value={data[key]}\n                onChange={(e) => setData({ ...data, [key]: e.target.value })}\n                onChange={(e) => this.setState({ [key]: e.target.value })}\n              >\n                {field.choices.map((c) => (\n                  <MenuItem value={c.value} key={c.value}>\n                    {c.display_name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Stepper activeStep={step}>\n        <Step>\n          <StepLabel>Personal details</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Account details</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Summary</StepLabel>\n        </Step>\n      </Stepper>\n      <>\n        {step < 2 && (\n          <div>\n            {Object.keys(form[step]).map((key) =>\n              getFormComponent(key, form[step][key])\n            )}\n          </div>\n        )}\n      </>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}