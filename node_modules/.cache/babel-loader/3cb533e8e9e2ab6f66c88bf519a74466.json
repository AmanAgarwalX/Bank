{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/aman/work/tcs/bank/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nconst useStyles = makeStyles(theme => {});\nconst form = [{\n  first_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"First name\",\n    max_length: 30\n  },\n  last_name: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Last name\",\n    max_length: 150\n  },\n  email: {\n    type: \"email\",\n    required: true,\n    read_only: false,\n    label: \"Email\"\n  },\n  password1: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Password1\"\n  },\n  password2: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Password2\"\n  },\n  address: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Address\"\n  },\n  city: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"City\"\n  },\n  state: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"State\"\n  },\n  zip_code: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Zip code\"\n  },\n  country: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Country\"\n  }\n}, {\n  phone_number: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Phone number\",\n    max_length: 128\n  },\n  type: {\n    type: \"choice\",\n    required: true,\n    read_only: false,\n    label: \"Account Type\",\n    choices: [{\n      value: \"Current\",\n      display_name: \"Current\"\n    }, {\n      value: \"Savings\",\n      display_name: \"Savings\"\n    }]\n  },\n  pan: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Pan number\"\n  },\n  aadhar: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Aadhar number\"\n  },\n  company: {\n    type: \"string\",\n    required: true,\n    read_only: false,\n    label: \"Current Company\"\n  }\n}];\nconst isMultiline = new Set([\"address\"]);\nexport default _s(props => {\n  _s();\n\n  const classes = useStyles();\n  const [data, setData] = useState({});\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            type: key.startsWith(\"password\") ? \"password\" : \"string\",\n            value: data[key],\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            helperText: field.label,\n            label: _.startCase(field.label || key),\n            variant: \"outlined\",\n            required: field.required,\n            fullWidth: true,\n            multiline: isMultiline.has(key) || false,\n            rows: isMultiline.has(key) ? 2 : 1,\n            id: key,\n            name: key,\n            autoComplete: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case \"date\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n            disableToolbar: true,\n            value: data[key],\n            onChange: e => setData({ ...data,\n              [key]: e.target.value\n            }),\n            helperText: field.label,\n            label: _.startCase(field.label || key),\n            variant: \"inline\",\n            format: \"yyyy-MM-dd\",\n            margin: \"normal\",\n            id: key,\n            KeyboardButtonProps: {\n              \"aria-label\": \"change date\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this);\n\n      case \"url\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [\"Please sign here to accept the\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://drive.google.com/file/d/10FawQm251QFO-8CtbrzRiRD3e_4YGHoC/view\",\n            target: \"blank\",\n            children: \"terms and conditions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SignatureCanvas, {\n            ref: ref => {\n              this.sigCanvas = ref;\n            },\n            clearOnResize: false,\n            penColor: \"black\",\n            canvasProps: {\n              className: \"sigCanvas\",\n              style: {\n                border: \"1px solid\",\n                width: \"100%\",\n                height: 200\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), this.state.errors[key] && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            style: {\n              color: \"red\"\n            },\n            children: this.state.errors[key]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            style: {\n              float: \"left\"\n            },\n            onClick: () => {\n              var _this$sigCanvas;\n\n              return (_this$sigCanvas = this.sigCanvas) === null || _this$sigCanvas === void 0 ? void 0 : _this$sigCanvas.clear();\n            },\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this);\n\n      case \"choice or other\":\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            required: field.required,\n            error: this.state.errors[key] !== undefined,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: _.startCase(labelMap[key] || key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              error: this.state.errors[key] !== undefined,\n              required: field.required,\n              value: this.state[key] !== null ? field.choices.includes(this.state[key]) ? this.state[key] : \"Other\" : \"\",\n              onChange: e => this.setState({\n                [key]: e.target.value !== \"Other\" ? e.target.value : \"\"\n              }),\n              children: _.concat(field.choices, \"Other\").map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: c,\n                children: c\n              }, c, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              style: this.state.errors[key] && {\n                color: \"red\"\n              },\n              children: this.state.errors[key] ? this.state.errors[key] : helpertextMap[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), this.state[key] !== null && !field.choices.includes(this.state[key]) && /*#__PURE__*/_jsxDEV(TextField, {\n            value: this.state[key],\n            type: \"string\",\n            onChange: e => this.setState({\n              [key]: e.target.value\n            }),\n            error: this.state.errors[key] !== undefined,\n            helperText: this.state.errors[key],\n            variant: \"outlined\",\n            required: field.required,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Hello\"\n  }, void 0, false);\n}, \"dE21dOEhE8ceLwgXrYN9yensE/g=\", false, function () {\n  return [useStyles];\n});","map":{"version":3,"sources":["/home/aman/work/tcs/bank/src/App.js"],"names":["makeStyles","React","useState","Grid","TextField","_","KeyboardDatePicker","useStyles","theme","form","first_name","type","required","read_only","label","max_length","last_name","email","password1","password2","address","city","state","zip_code","country","phone_number","choices","value","display_name","pan","aadhar","company","isMultiline","Set","props","classes","data","setData","getFormComponent","key","field","startsWith","e","target","startCase","has","ref","sigCanvas","className","style","border","width","height","errors","color","float","clear","undefined","labelMap","includes","setState","concat","map","c","helpertextMap"],"mappings":"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","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst useStyles = makeStyles((theme) => {});\n\nconst form = [\n  {\n    first_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"First name\",\n      max_length: 30,\n    },\n    last_name: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Last name\",\n      max_length: 150,\n    },\n    email: {\n      type: \"email\",\n      required: true,\n      read_only: false,\n      label: \"Email\",\n    },\n    password1: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Password1\",\n    },\n    password2: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Password2\",\n    },\n    address: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Address\",\n    },\n    city: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"City\",\n    },\n    state: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"State\",\n    },\n    zip_code: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Zip code\",\n    },\n    country: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Country\",\n    },\n  },\n  {\n    phone_number: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Phone number\",\n      max_length: 128,\n    },\n    type: {\n      type: \"choice\",\n      required: true,\n      read_only: false,\n      label: \"Account Type\",\n      choices: [\n        {\n          value: \"Current\",\n          display_name: \"Current\",\n        },\n        {\n          value: \"Savings\",\n          display_name: \"Savings\",\n        },\n      ],\n    },\n    pan: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Pan number\",\n    },\n    aadhar: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Aadhar number\",\n    },\n    company: {\n      type: \"string\",\n      required: true,\n      read_only: false,\n      label: \"Current Company\",\n    },\n  },\n];\nconst isMultiline = new Set([\"address\"]);\n\nexport default (props) => {\n  const classes = useStyles();\n  const [data, setData] = useState({});\n\n  const getFormComponent = (key, field) => {\n    switch (field.type) {\n      case \"email\":\n      case \"string\":\n        return (\n          <Grid item xs={12} key={key}>\n            <TextField\n              type={key.startsWith(\"password\") ? \"password\" : \"string\"}\n              value={data[key]}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              helperText={field.label}\n              label={_.startCase(field.label || key)}\n              variant=\"outlined\"\n              required={field.required}\n              fullWidth\n              multiline={isMultiline.has(key) || false}\n              rows={isMultiline.has(key) ? 2 : 1}\n              id={key}\n              name={key}\n              autoComplete={key}\n            />\n          </Grid>\n        );\n        break;\n      case \"date\":\n        return (\n          <Grid item xs={12} key={key}>\n            <KeyboardDatePicker\n              disableToolbar\n              value={data[key]}\n              onChange={(e) => setData({ ...data, [key]: e.target.value })}\n              helperText={field.label}\n              label={_.startCase(field.label || key)}\n              variant=\"inline\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              id={key}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </Grid>\n        );\n      case \"url\":\n        return (\n          <Grid item xs={12} key={key}>\n            Please sign here to accept the{\" \"}\n            <a\n              href=\"https://drive.google.com/file/d/10FawQm251QFO-8CtbrzRiRD3e_4YGHoC/view\"\n              target=\"blank\"\n            >\n              terms and conditions\n            </a>\n            <SignatureCanvas\n              ref={(ref) => {\n                this.sigCanvas = ref;\n              }}\n              clearOnResize={false}\n              penColor=\"black\"\n              canvasProps={{\n                className: \"sigCanvas\",\n                style: { border: \"1px solid\", width: \"100%\", height: 200 },\n              }}\n            />\n            {this.state.errors[key] && (\n              <FormHelperText style={{ color: \"red\" }}>\n                {this.state.errors[key]}\n              </FormHelperText>\n            )}\n            <a\n              style={{ float: \"left\" }}\n              onClick={() => {\n                return this.sigCanvas?.clear();\n              }}\n            >\n              Clear\n            </a>\n          </Grid>\n        );\n      case \"choice or other\":\n        return (\n          <Grid item xs={12} key={key}>\n            <FormControl\n              fullWidth\n              key={key}\n              required={field.required}\n              error={this.state.errors[key] !== undefined}\n            >\n              <InputLabel>{_.startCase(labelMap[key] || key)}</InputLabel>\n              <Select\n                fullWidth\n                error={this.state.errors[key] !== undefined}\n                required={field.required}\n                value={\n                  this.state[key] !== null\n                    ? field.choices.includes(this.state[key])\n                      ? this.state[key]\n                      : \"Other\"\n                    : \"\"\n                }\n                onChange={(e) =>\n                  this.setState({\n                    [key]: e.target.value !== \"Other\" ? e.target.value : \"\",\n                  })\n                }\n              >\n                {_.concat(field.choices, \"Other\").map((c) => (\n                  <MenuItem value={c} key={c}>\n                    {c}\n                  </MenuItem>\n                ))}\n              </Select>\n\n              <FormHelperText\n                style={this.state.errors[key] && { color: \"red\" }}\n              >\n                {this.state.errors[key]\n                  ? this.state.errors[key]\n                  : helpertextMap[key]}\n              </FormHelperText>\n            </FormControl>\n            {this.state[key] !== null &&\n              !field.choices.includes(this.state[key]) && (\n                <TextField\n                  value={this.state[key]}\n                  type={\"string\"}\n                  onChange={(e) => this.setState({ [key]: e.target.value })}\n                  error={this.state.errors[key] !== undefined}\n                  helperText={this.state.errors[key]}\n                  variant=\"outlined\"\n                  required={field.required}\n                  fullWidth\n                />\n              )}\n          </Grid>\n        );\n    }\n  };\n\n  return <>Hello</>;\n};\n"]},"metadata":{},"sourceType":"module"}